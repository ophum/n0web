/* eslint-disable */
//@ts-nocheck
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

//var google_api_annotations_pb = require('./google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var n0stack_budget_v0_network_interface_pb = require('../../budget/v0/network_interface_pb.js');
//var protoc$gen$swagger_options_annotations_pb = require('./protoc-gen-swagger/options/annotations_pb.js');
goog.exportSymbol('proto.n0stack.pool.v0.ApplyNetworkRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.DeleteNetworkRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.GetNetworkRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ListNetworksRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ListNetworksResponse', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.Network', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.Network.NetworkState', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.Network.displayName = 'proto.n0stack.pool.v0.Network';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.Network} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    ipv4Cidr: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ipv6Cidr: jspb.Message.getFieldWithDefault(msg, 11, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 12, ""),
    state: jspb.Message.getFieldWithDefault(msg, 50, 0),
    reservedNetworkInterfacesMap: (f = msg.getReservedNetworkInterfacesMap()) ? f.toObject(includeInstance, proto.n0stack.budget.v0.NetworkInterface.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.Network}
 */
proto.n0stack.pool.v0.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.Network;
  return proto.n0stack.pool.v0.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.Network}
 */
proto.n0stack.pool.v0.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4Cidr(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Cidr(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 50:
      var value = /** @type {!proto.n0stack.pool.v0.Network.NetworkState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 51:
      var value = msg.getReservedNetworkInterfacesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.n0stack.budget.v0.NetworkInterface.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getIpv4Cidr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIpv6Cidr();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      50,
      f
    );
  }
  f = message.getReservedNetworkInterfacesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(51, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.n0stack.budget.v0.NetworkInterface.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.n0stack.pool.v0.Network.NetworkState = {
  NETWORK_UNSPECIFIED: 0,
  UNKNOWN: 1,
  AVAILABLE: 2
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.Network.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Network.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.Network.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.Network.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.Network.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.Network.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * optional string ipv4_cidr = 10;
 * @return {string}
 */
proto.n0stack.pool.v0.Network.prototype.getIpv4Cidr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Network.prototype.setIpv4Cidr = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string ipv6_cidr = 11;
 * @return {string}
 */
proto.n0stack.pool.v0.Network.prototype.getIpv6Cidr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Network.prototype.setIpv6Cidr = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string domain = 12;
 * @return {string}
 */
proto.n0stack.pool.v0.Network.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Network.prototype.setDomain = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional NetworkState state = 50;
 * @return {!proto.n0stack.pool.v0.Network.NetworkState}
 */
proto.n0stack.pool.v0.Network.prototype.getState = function() {
  return /** @type {!proto.n0stack.pool.v0.Network.NetworkState} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/** @param {!proto.n0stack.pool.v0.Network.NetworkState} value */
proto.n0stack.pool.v0.Network.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 50, value);
};


/**
 * map<string, n0stack.budget.v0.NetworkInterface> reserved_network_interfaces = 51;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.n0stack.budget.v0.NetworkInterface>}
 */
proto.n0stack.pool.v0.Network.prototype.getReservedNetworkInterfacesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.n0stack.budget.v0.NetworkInterface>} */ (
      jspb.Message.getMapField(this, 51, opt_noLazyCreate,
      proto.n0stack.budget.v0.NetworkInterface));
};


proto.n0stack.pool.v0.Network.prototype.clearReservedNetworkInterfacesMap = function() {
  this.getReservedNetworkInterfacesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ListNetworksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ListNetworksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ListNetworksRequest.displayName = 'proto.n0stack.pool.v0.ListNetworksRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ListNetworksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ListNetworksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ListNetworksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNetworksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ListNetworksRequest}
 */
proto.n0stack.pool.v0.ListNetworksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ListNetworksRequest;
  return proto.n0stack.pool.v0.ListNetworksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ListNetworksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ListNetworksRequest}
 */
proto.n0stack.pool.v0.ListNetworksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ListNetworksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ListNetworksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ListNetworksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNetworksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ListNetworksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.n0stack.pool.v0.ListNetworksResponse.repeatedFields_, null);
};
goog.inherits(proto.n0stack.pool.v0.ListNetworksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ListNetworksResponse.displayName = 'proto.n0stack.pool.v0.ListNetworksResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.n0stack.pool.v0.ListNetworksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ListNetworksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ListNetworksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ListNetworksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNetworksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    networksList: jspb.Message.toObjectList(msg.getNetworksList(),
    proto.n0stack.pool.v0.Network.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ListNetworksResponse}
 */
proto.n0stack.pool.v0.ListNetworksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ListNetworksResponse;
  return proto.n0stack.pool.v0.ListNetworksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ListNetworksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ListNetworksResponse}
 */
proto.n0stack.pool.v0.ListNetworksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.n0stack.pool.v0.Network;
      reader.readMessage(value,proto.n0stack.pool.v0.Network.deserializeBinaryFromReader);
      msg.addNetworks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ListNetworksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ListNetworksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ListNetworksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNetworksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.n0stack.pool.v0.Network.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Network networks = 1;
 * @return {!Array<!proto.n0stack.pool.v0.Network>}
 */
proto.n0stack.pool.v0.ListNetworksResponse.prototype.getNetworksList = function() {
  return /** @type{!Array<!proto.n0stack.pool.v0.Network>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.n0stack.pool.v0.Network, 1));
};


/** @param {!Array<!proto.n0stack.pool.v0.Network>} value */
proto.n0stack.pool.v0.ListNetworksResponse.prototype.setNetworksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.n0stack.pool.v0.Network=} opt_value
 * @param {number=} opt_index
 * @return {!proto.n0stack.pool.v0.Network}
 */
proto.n0stack.pool.v0.ListNetworksResponse.prototype.addNetworks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.n0stack.pool.v0.Network, opt_index);
};


proto.n0stack.pool.v0.ListNetworksResponse.prototype.clearNetworksList = function() {
  this.setNetworksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.GetNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.GetNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.GetNetworkRequest.displayName = 'proto.n0stack.pool.v0.GetNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.GetNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.GetNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.GetNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.GetNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.GetNetworkRequest}
 */
proto.n0stack.pool.v0.GetNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.GetNetworkRequest;
  return proto.n0stack.pool.v0.GetNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.GetNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.GetNetworkRequest}
 */
proto.n0stack.pool.v0.GetNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.GetNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.GetNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.GetNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.GetNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.GetNetworkRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.GetNetworkRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ApplyNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ApplyNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ApplyNetworkRequest.displayName = 'proto.n0stack.pool.v0.ApplyNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ApplyNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ApplyNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    ipv4Cidr: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ipv6Cidr: jspb.Message.getFieldWithDefault(msg, 11, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ApplyNetworkRequest}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ApplyNetworkRequest;
  return proto.n0stack.pool.v0.ApplyNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ApplyNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ApplyNetworkRequest}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4Cidr(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Cidr(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ApplyNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ApplyNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getIpv4Cidr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIpv6Cidr();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * optional string ipv4_cidr = 10;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.getIpv4Cidr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.setIpv4Cidr = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string ipv6_cidr = 11;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.getIpv6Cidr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.setIpv6Cidr = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string domain = 12;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNetworkRequest.prototype.setDomain = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.DeleteNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.DeleteNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.DeleteNetworkRequest.displayName = 'proto.n0stack.pool.v0.DeleteNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.DeleteNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.DeleteNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.DeleteNetworkRequest}
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.DeleteNetworkRequest;
  return proto.n0stack.pool.v0.DeleteNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.DeleteNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.DeleteNetworkRequest}
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.DeleteNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.DeleteNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.DeleteNetworkRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.DeleteNetworkRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.displayName = 'proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    networkInterfaceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    hardwareAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ipv4Address: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ipv6Address: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest;
  return proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkInterfaceName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardwareAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4Address(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv6Address(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetworkInterfaceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHardwareAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIpv4Address();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIpv6Address();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string network_name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.getNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.setNetworkName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network_interface_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.getNetworkInterfaceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.setNetworkInterfaceName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * optional string hardware_address = 4;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.getHardwareAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.setHardwareAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ipv4_address = 5;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.getIpv4Address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.setIpv4Address = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ipv6_address = 6;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.getIpv6Address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveNetworkInterfaceRequest.prototype.setIpv6Address = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.displayName = 'proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    networkInterfaceName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest}
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest;
  return proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest}
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkInterfaceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetworkInterfaceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string network_name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.prototype.getNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.prototype.setNetworkName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network_interface_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.prototype.getNetworkInterfaceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReleaseNetworkInterfaceRequest.prototype.setNetworkInterfaceName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.n0stack.pool.v0);
