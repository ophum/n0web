/* eslint-disable */
//@ts-nocheck
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var n0stack_budget_v0_compute_pb = require('./n0stack/budget/v0/compute_pb.js');
var n0stack_budget_v0_storage_pb = require('./n0stack/budget/v0/storage_pb.js');
var protoc$gen$swagger_options_annotations_pb = require('./protoc-gen-swagger/options/annotations_pb.js');
goog.exportSymbol('proto.n0stack.pool.v0.ApplyNodeRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.DeleteNodeRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.GetNodeRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ListNodesRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ListNodesResponse', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.Node', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.Node.NodeState', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ReleaseComputeRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ReleaseStorageRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ReserveComputeRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ReserveStorageRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ScheduleComputeRequest', null, global);
goog.exportSymbol('proto.n0stack.pool.v0.ScheduleStorageRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.Node.displayName = 'proto.n0stack.pool.v0.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    address: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ipmiAddress: jspb.Message.getFieldWithDefault(msg, 11, ""),
    serial: jspb.Message.getFieldWithDefault(msg, 12, ""),
    cpuMilliCores: jspb.Message.getFieldWithDefault(msg, 13, 0),
    memoryBytes: jspb.Message.getFieldWithDefault(msg, 14, 0),
    storageBytes: jspb.Message.getFieldWithDefault(msg, 15, 0),
    datacenter: jspb.Message.getFieldWithDefault(msg, 16, ""),
    availabilityZone: jspb.Message.getFieldWithDefault(msg, 17, ""),
    cell: jspb.Message.getFieldWithDefault(msg, 18, ""),
    rack: jspb.Message.getFieldWithDefault(msg, 19, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 20, 0),
    state: jspb.Message.getFieldWithDefault(msg, 50, 0),
    reservedComputesMap: (f = msg.getReservedComputesMap()) ? f.toObject(includeInstance, proto.n0stack.budget.v0.Compute.toObject) : [],
    reservedStoragesMap: (f = msg.getReservedStoragesMap()) ? f.toObject(includeInstance, proto.n0stack.budget.v0.Storage.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.Node}
 */
proto.n0stack.pool.v0.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.Node;
  return proto.n0stack.pool.v0.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.Node}
 */
proto.n0stack.pool.v0.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpmiAddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuMilliCores(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemoryBytes(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorageBytes(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatacenter(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailabilityZone(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCell(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setRack(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnit(value);
      break;
    case 50:
      var value = /** @type {!proto.n0stack.pool.v0.Node.NodeState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 51:
      var value = msg.getReservedComputesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.n0stack.budget.v0.Compute.deserializeBinaryFromReader, "");
         });
      break;
    case 52:
      var value = msg.getReservedStoragesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.n0stack.budget.v0.Storage.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIpmiAddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCpuMilliCores();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getMemoryBytes();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getStorageBytes();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getDatacenter();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAvailabilityZone();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCell();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getRack();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      50,
      f
    );
  }
  f = message.getReservedComputesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(51, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.n0stack.budget.v0.Compute.serializeBinaryToWriter);
  }
  f = message.getReservedStoragesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(52, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.n0stack.budget.v0.Storage.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.n0stack.pool.v0.Node.NodeState = {
  NODE_UNSPECIFIED: 0,
  READY: 1,
  NOT_READY: 2
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.Node.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.Node.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.Node.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.Node.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * optional string address = 10;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string ipmi_address = 11;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getIpmiAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setIpmiAddress = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string serial = 12;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setSerial = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 cpu_milli_cores = 13;
 * @return {number}
 */
proto.n0stack.pool.v0.Node.prototype.getCpuMilliCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.Node.prototype.setCpuMilliCores = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 memory_bytes = 14;
 * @return {number}
 */
proto.n0stack.pool.v0.Node.prototype.getMemoryBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.Node.prototype.setMemoryBytes = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 storage_bytes = 15;
 * @return {number}
 */
proto.n0stack.pool.v0.Node.prototype.getStorageBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.Node.prototype.setStorageBytes = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string datacenter = 16;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getDatacenter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setDatacenter = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string availability_zone = 17;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getAvailabilityZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setAvailabilityZone = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string cell = 18;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getCell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setCell = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string rack = 19;
 * @return {string}
 */
proto.n0stack.pool.v0.Node.prototype.getRack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.Node.prototype.setRack = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional uint32 unit = 20;
 * @return {number}
 */
proto.n0stack.pool.v0.Node.prototype.getUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.Node.prototype.setUnit = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional NodeState state = 50;
 * @return {!proto.n0stack.pool.v0.Node.NodeState}
 */
proto.n0stack.pool.v0.Node.prototype.getState = function() {
  return /** @type {!proto.n0stack.pool.v0.Node.NodeState} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/** @param {!proto.n0stack.pool.v0.Node.NodeState} value */
proto.n0stack.pool.v0.Node.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 50, value);
};


/**
 * map<string, n0stack.budget.v0.Compute> reserved_computes = 51;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.n0stack.budget.v0.Compute>}
 */
proto.n0stack.pool.v0.Node.prototype.getReservedComputesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.n0stack.budget.v0.Compute>} */ (
      jspb.Message.getMapField(this, 51, opt_noLazyCreate,
      proto.n0stack.budget.v0.Compute));
};


proto.n0stack.pool.v0.Node.prototype.clearReservedComputesMap = function() {
  this.getReservedComputesMap().clear();
};


/**
 * map<string, n0stack.budget.v0.Storage> reserved_storages = 52;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.n0stack.budget.v0.Storage>}
 */
proto.n0stack.pool.v0.Node.prototype.getReservedStoragesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.n0stack.budget.v0.Storage>} */ (
      jspb.Message.getMapField(this, 52, opt_noLazyCreate,
      proto.n0stack.budget.v0.Storage));
};


proto.n0stack.pool.v0.Node.prototype.clearReservedStoragesMap = function() {
  this.getReservedStoragesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ListNodesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ListNodesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ListNodesRequest.displayName = 'proto.n0stack.pool.v0.ListNodesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ListNodesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ListNodesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ListNodesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNodesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ListNodesRequest}
 */
proto.n0stack.pool.v0.ListNodesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ListNodesRequest;
  return proto.n0stack.pool.v0.ListNodesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ListNodesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ListNodesRequest}
 */
proto.n0stack.pool.v0.ListNodesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ListNodesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ListNodesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ListNodesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNodesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ListNodesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.n0stack.pool.v0.ListNodesResponse.repeatedFields_, null);
};
goog.inherits(proto.n0stack.pool.v0.ListNodesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ListNodesResponse.displayName = 'proto.n0stack.pool.v0.ListNodesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.n0stack.pool.v0.ListNodesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ListNodesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ListNodesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ListNodesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNodesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.n0stack.pool.v0.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ListNodesResponse}
 */
proto.n0stack.pool.v0.ListNodesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ListNodesResponse;
  return proto.n0stack.pool.v0.ListNodesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ListNodesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ListNodesResponse}
 */
proto.n0stack.pool.v0.ListNodesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.n0stack.pool.v0.Node;
      reader.readMessage(value,proto.n0stack.pool.v0.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ListNodesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ListNodesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ListNodesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ListNodesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.n0stack.pool.v0.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node nodes = 1;
 * @return {!Array<!proto.n0stack.pool.v0.Node>}
 */
proto.n0stack.pool.v0.ListNodesResponse.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.n0stack.pool.v0.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.n0stack.pool.v0.Node, 1));
};


/** @param {!Array<!proto.n0stack.pool.v0.Node>} value */
proto.n0stack.pool.v0.ListNodesResponse.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.n0stack.pool.v0.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.n0stack.pool.v0.Node}
 */
proto.n0stack.pool.v0.ListNodesResponse.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.n0stack.pool.v0.Node, opt_index);
};


proto.n0stack.pool.v0.ListNodesResponse.prototype.clearNodesList = function() {
  this.setNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.GetNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.GetNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.GetNodeRequest.displayName = 'proto.n0stack.pool.v0.GetNodeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.GetNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.GetNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.GetNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.GetNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.GetNodeRequest}
 */
proto.n0stack.pool.v0.GetNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.GetNodeRequest;
  return proto.n0stack.pool.v0.GetNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.GetNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.GetNodeRequest}
 */
proto.n0stack.pool.v0.GetNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.GetNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.GetNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.GetNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.GetNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.GetNodeRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.GetNodeRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ApplyNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ApplyNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ApplyNodeRequest.displayName = 'proto.n0stack.pool.v0.ApplyNodeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ApplyNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ApplyNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ApplyNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    address: jspb.Message.getFieldWithDefault(msg, 10, ""),
    ipmiAddress: jspb.Message.getFieldWithDefault(msg, 11, ""),
    serial: jspb.Message.getFieldWithDefault(msg, 12, ""),
    cpuMilliCores: jspb.Message.getFieldWithDefault(msg, 13, 0),
    memoryBytes: jspb.Message.getFieldWithDefault(msg, 14, 0),
    storageBytes: jspb.Message.getFieldWithDefault(msg, 15, 0),
    datacenter: jspb.Message.getFieldWithDefault(msg, 16, ""),
    availabilityZone: jspb.Message.getFieldWithDefault(msg, 17, ""),
    cell: jspb.Message.getFieldWithDefault(msg, 18, ""),
    rack: jspb.Message.getFieldWithDefault(msg, 19, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ApplyNodeRequest}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ApplyNodeRequest;
  return proto.n0stack.pool.v0.ApplyNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ApplyNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ApplyNodeRequest}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpmiAddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerial(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuMilliCores(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemoryBytes(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStorageBytes(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatacenter(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailabilityZone(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCell(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setRack(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ApplyNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ApplyNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ApplyNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIpmiAddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSerial();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCpuMilliCores();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getMemoryBytes();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getStorageBytes();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getDatacenter();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAvailabilityZone();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCell();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getRack();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getUnit();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ApplyNodeRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * map<string, string> labels = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ApplyNodeRequest.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * optional string address = 10;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string ipmi_address = 11;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getIpmiAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setIpmiAddress = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string serial = 12;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getSerial = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setSerial = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 cpu_milli_cores = 13;
 * @return {number}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getCpuMilliCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setCpuMilliCores = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 memory_bytes = 14;
 * @return {number}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getMemoryBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setMemoryBytes = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 storage_bytes = 15;
 * @return {number}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getStorageBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setStorageBytes = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string datacenter = 16;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getDatacenter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setDatacenter = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string availability_zone = 17;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getAvailabilityZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setAvailabilityZone = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string cell = 18;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getCell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setCell = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string rack = 19;
 * @return {string}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getRack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setRack = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional uint32 unit = 20;
 * @return {number}
 */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.getUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ApplyNodeRequest.prototype.setUnit = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.DeleteNodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.DeleteNodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.DeleteNodeRequest.displayName = 'proto.n0stack.pool.v0.DeleteNodeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.DeleteNodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.DeleteNodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.DeleteNodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.DeleteNodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.DeleteNodeRequest}
 */
proto.n0stack.pool.v0.DeleteNodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.DeleteNodeRequest;
  return proto.n0stack.pool.v0.DeleteNodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.DeleteNodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.DeleteNodeRequest}
 */
proto.n0stack.pool.v0.DeleteNodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.DeleteNodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.DeleteNodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.DeleteNodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.DeleteNodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.DeleteNodeRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.DeleteNodeRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ScheduleComputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ScheduleComputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ScheduleComputeRequest.displayName = 'proto.n0stack.pool.v0.ScheduleComputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ScheduleComputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ScheduleComputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    computeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    requestCpuMilliCore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limitCpuMilliCore: jspb.Message.getFieldWithDefault(msg, 5, 0),
    requestMemoryBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    limitMemoryBytes: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ScheduleComputeRequest}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ScheduleComputeRequest;
  return proto.n0stack.pool.v0.ScheduleComputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ScheduleComputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ScheduleComputeRequest}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComputeName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestCpuMilliCore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimitCpuMilliCore(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestMemoryBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimitMemoryBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ScheduleComputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ScheduleComputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComputeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestCpuMilliCore();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLimitCpuMilliCore();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getRequestMemoryBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLimitMemoryBytes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string compute_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.getComputeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.setComputeName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * optional uint32 request_cpu_milli_core = 4;
 * @return {number}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.getRequestCpuMilliCore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.setRequestCpuMilliCore = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 limit_cpu_milli_core = 5;
 * @return {number}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.getLimitCpuMilliCore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.setLimitCpuMilliCore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 request_memory_bytes = 6;
 * @return {number}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.getRequestMemoryBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.setRequestMemoryBytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 limit_memory_bytes = 7;
 * @return {number}
 */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.getLimitMemoryBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ScheduleComputeRequest.prototype.setLimitMemoryBytes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ReserveComputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ReserveComputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ReserveComputeRequest.displayName = 'proto.n0stack.pool.v0.ReserveComputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ReserveComputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ReserveComputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReserveComputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    computeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    requestCpuMilliCore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limitCpuMilliCore: jspb.Message.getFieldWithDefault(msg, 5, 0),
    requestMemoryBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    limitMemoryBytes: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ReserveComputeRequest}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ReserveComputeRequest;
  return proto.n0stack.pool.v0.ReserveComputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ReserveComputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ReserveComputeRequest}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComputeName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestCpuMilliCore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimitCpuMilliCore(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestMemoryBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimitMemoryBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ReserveComputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ReserveComputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReserveComputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComputeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestCpuMilliCore();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLimitCpuMilliCore();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getRequestMemoryBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLimitMemoryBytes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.setNodeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string compute_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getComputeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.setComputeName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ReserveComputeRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * optional uint32 request_cpu_milli_core = 4;
 * @return {number}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getRequestCpuMilliCore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.setRequestCpuMilliCore = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 limit_cpu_milli_core = 5;
 * @return {number}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getLimitCpuMilliCore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.setLimitCpuMilliCore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 request_memory_bytes = 6;
 * @return {number}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getRequestMemoryBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.setRequestMemoryBytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 limit_memory_bytes = 7;
 * @return {number}
 */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.getLimitMemoryBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ReserveComputeRequest.prototype.setLimitMemoryBytes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ReleaseComputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ReleaseComputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ReleaseComputeRequest.displayName = 'proto.n0stack.pool.v0.ReleaseComputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ReleaseComputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ReleaseComputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    computeName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ReleaseComputeRequest}
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ReleaseComputeRequest;
  return proto.n0stack.pool.v0.ReleaseComputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ReleaseComputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ReleaseComputeRequest}
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComputeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ReleaseComputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ReleaseComputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComputeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReleaseComputeRequest.prototype.setNodeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string compute_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ReleaseComputeRequest.prototype.getComputeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReleaseComputeRequest.prototype.setComputeName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ScheduleStorageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ScheduleStorageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ScheduleStorageRequest.displayName = 'proto.n0stack.pool.v0.ScheduleStorageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ScheduleStorageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ScheduleStorageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    requestBytes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limitBytes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ScheduleStorageRequest}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ScheduleStorageRequest;
  return proto.n0stack.pool.v0.ScheduleStorageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ScheduleStorageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ScheduleStorageRequest}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestBytes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimitBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ScheduleStorageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ScheduleStorageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestBytes();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLimitBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string storage_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.getStorageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.setStorageName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * optional uint64 request_bytes = 4;
 * @return {number}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.getRequestBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.setRequestBytes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 limit_bytes = 5;
 * @return {number}
 */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.getLimitBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ScheduleStorageRequest.prototype.setLimitBytes = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ReserveStorageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ReserveStorageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ReserveStorageRequest.displayName = 'proto.n0stack.pool.v0.ReserveStorageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ReserveStorageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ReserveStorageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReserveStorageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storageName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    requestBytes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limitBytes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ReserveStorageRequest}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ReserveStorageRequest;
  return proto.n0stack.pool.v0.ReserveStorageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ReserveStorageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ReserveStorageRequest}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageName(value);
      break;
    case 3:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestBytes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimitBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ReserveStorageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ReserveStorageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReserveStorageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorageName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestBytes();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLimitBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.setNodeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string storage_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.getStorageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.setStorageName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> annotations = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.n0stack.pool.v0.ReserveStorageRequest.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


/**
 * optional uint64 request_bytes = 4;
 * @return {number}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.getRequestBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.setRequestBytes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 limit_bytes = 5;
 * @return {number}
 */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.getLimitBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.n0stack.pool.v0.ReserveStorageRequest.prototype.setLimitBytes = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.n0stack.pool.v0.ReleaseStorageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.n0stack.pool.v0.ReleaseStorageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.n0stack.pool.v0.ReleaseStorageRequest.displayName = 'proto.n0stack.pool.v0.ReleaseStorageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.n0stack.pool.v0.ReleaseStorageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.n0stack.pool.v0.ReleaseStorageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storageName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.n0stack.pool.v0.ReleaseStorageRequest}
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.n0stack.pool.v0.ReleaseStorageRequest;
  return proto.n0stack.pool.v0.ReleaseStorageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.n0stack.pool.v0.ReleaseStorageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.n0stack.pool.v0.ReleaseStorageRequest}
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.n0stack.pool.v0.ReleaseStorageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.n0stack.pool.v0.ReleaseStorageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorageName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string node_name = 1;
 * @return {string}
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.prototype.getNodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReleaseStorageRequest.prototype.setNodeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string storage_name = 2;
 * @return {string}
 */
proto.n0stack.pool.v0.ReleaseStorageRequest.prototype.getStorageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.n0stack.pool.v0.ReleaseStorageRequest.prototype.setStorageName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.n0stack.pool.v0);
